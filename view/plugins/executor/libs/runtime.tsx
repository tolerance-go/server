// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import { useLocation } from '@/.umi/exports';
import React, { useEffect } from 'react';
import { executors as rawExecutors } from './executors';

const Executor = React.memo(
  ({ hook, namespace }: { hook: () => any; namespace: string }) => {
    hook();

    useEffect(() => {
      console.log('executor: ', namespace, ' mounted.');
      return () => {
        console.log('executor: ', namespace, ' unmounted.');
      };
    }, []);

    return null;
  },
);

const Exec = React.memo(() => {
  const location = useLocation();
  return (
    <>
      {rawExecutors
        .filter((item) => {
          if (item.configs?.pathScopes) {
            return item.configs.pathScopes.includes(location.pathname);
          }
          return true;
        })
        .map((item) => (
          <Executor
            key={item.namespace}
            hook={item.executor}
            namespace={item.namespace}
          />
        ))}
    </>
  );
});

function ProviderWrapper(props: any) {
  return (
    <>
      <Exec />
      {props.children}
    </>
  );
}

export function innerProvider(container, opts) {
  return React.cloneElement(
    container,
    null,
    <ProviderWrapper {...opts}>{container.props.children}</ProviderWrapper>,
  );
}
